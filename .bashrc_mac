#!/usr/local/bin/bash
#echo "Runing bash version $(/usr/local/bin/bash --version)"
#eval "$(ssh-agent -s)"
# Powerline
powerline-daemon -q
POWERLINE_BASH_CONTINUATION=1
POWERLINE_BASH_SELECT=1
source /usr/local/lib/python3.10/site-packages/powerline/bindings/bash/powerline.sh

# Setting PATH for Python 3.12
# The original version is saved in .bash_profile.pysave
PATH="/Library/Frameworks/Python.framework/Versions/3.12/bin:${PATH}"
export PATH

function showHidden {
  isShown=$(defaults read com.apple.finder AppleShowAllFiles)
  if [[ $isShown == "false" ]]; then
    defaults write com.apple.finder AppleShowAllFiles true
    killall Finder
  fi
}
showHidden
defaults write -g com.apple.mouse.scaling -integer -1

export GH=$HOME/src/github
source $GH/dots/.user_prompts
source $GH/dots/.ps_filter

# usage stringContains needle haystack
# returns true if needle in haystack
function stringContains {
  $(echo "$2"|grep -Eqi "$1");
  return $?;
}

function bash_major_version() {
  echo "${BASH_VERSINFO[0]}"
}

function bash_minor_version() {
  echo "${BASH_VERSINFO[1]}"
}

function bash_version() {
  major=$(bash_major_version)
  minor=$(bash_minor_version)
  echo "${major}.${minor}"
}

# stolen from https://stackoverflow.com/questions/8654051/how-can-i-compare-two-floating-point-numbers-in-bash
is_first_floating_number_bigger () {
    number1="$1"
    number2="$2"

    [ ${number1%.*} -eq ${number2%.*} ] && [ ${number1#*.} \> ${number2#*.} ] || [ ${number1%.*} -gt ${number2%.*} ];
    result=$?
    if [ "$result" -eq 0 ]; then result=1; else result=0; fi

    __FUNCTION_RETURN="${result}"
}

alias vbrc="vim $HOME/.bashrc && source $HOME/.bashrc"
alias brc="vimcat ~/.bashrc"
alias sbrc="source $HOME/.bashrc"

alias pau="ps auwx"
alias paug="ps auwx|grep "
alias paugi="ps awux|grep -i "
alias rst="sudo shutdown -r now"
alias gh="mkdir -p $HOME/src/github && cd $HOME/src/github"
alias gl="mkdir -p $HOME/src/gitlab && cd $HOME/src/gitlab" 
alias gc="git clone"


function sudo-only-commands  {
    # cache sudo password
    sudo ls
    # for a set of .command files, run only the 
    # lines starting with sudo
    files=$(ls *.command)
    IFS=$'\n'
    for f in $files; do
      lines=$(cat "$f" |grep sudo|cut -c 5-)
      echo $lines
    done
    confirm_yes "OK to run?"
    for f in $files; do
      lines=$(cat "$f" |grep sudo|cut -c 5-)
      for line in $lines; do
        sudo -i -u root bash -c "$line"
      done
    done
}
